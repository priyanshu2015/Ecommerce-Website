apps are created so that you can handle multiple things in one project
ex. vtop.vit.ac.in   ->  main project
      vtop.vit.ac.in/faculty   -> app for teachers
      vtop.vit.ac.in/Exams    -> another app for handling exams

when ever ask client to send data to server through post method we have to include csrf token in html in django as sjango uses this security system


for app also add its name in settings.py in INSTALLED_APPS which is later changed when you make a model in database discussed later

for static file
create a folder in apps name static inside it a folder name app name then add all static files there including text,css,images(for images we can also create a common media directory in main project folder discussed later)
for static files do some changes in settings.py(file in main project)
STATIC_URL = '/static/'
# add this section to open static files in django
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]


for templates file
create a folder in apps name templates inside it a folder name app name then add all templates there

steps to create database in django
1.migrate-
python manage.py migrate
function - django devta banado humari saari tables that are required for our apps or daaldo sqlite mein
basically what migration do is make a database schema, table name, its fields name not data. we are not touching database here. migrartions are stored in apps, if make any changes in migrations then we have make some changes in database schema

video relating migrate, models, model field - https://www.youtube.com/watch?v=S3PA3NL6tWI&list=PLu0W_9lII9ah7DDtYtflgwMwpT3xmjXY9&index=25&pbjreload=10

2.models - create database schema structure(same syntax for all database whether mysql or mongodb or sqlite)
if no primary key assigned then it will itself create an id attribute as a primary key which will be different for every every product added

3. change in installed apps in settings.py in project directory, app name with class created in apps.py in app name(shop) directory

4. python manage.py runserver to check if working

5. python manage.py makemigration
it stores the change you make in database schema not directly affects the database(isko abhi database mein write mat karna) and it stores the change in a file in migrations of that app

6. python manage.py migrate
isska matlab hai ki ab jo change hoga wo database mein apply kardega

7. register your model in admin.py of app 

now how to know if the change is really applied or not?
make superuser(admin account to control all what is going on in your app) using-
python manage.py createsuperuser
 
now open in url/admin then login and you can add items in your table created

now if you want to make changes in models.py to existing models or make new models then make changes, if add some atrributes to a previously generated model which has values to then attributes added should have default also. 
then write python manage.py makemigration
then python manage.py migrate


For managing media ->
in settings 
# Managing media
MEDIA_ROOT = os.path.join(BASE_DIR , 'media')
MEDIA_URL = '/media/'
in project not app urls.py->
from django.conf import settings
from django.conf.urls.static import static
in urls.py in urlpatterns add this->
] + static(settings.MEDIA_URL ,document_root = settings.MEDIA_ROOT)
in models.py of app
image = models.ImageField(upload_to="shop/images", default="")



To test models in shell->
python manage.py shell
and you can even add values to your database by writing code here instead of adding them in admin window on browser.
code written in python manage.py shell is python which can be used to traverse objects in dataset in python file also (views.py)
code to write in sqlite database(same syntax for all databases whether mysql or mongo) - 
D:\WebDevelopment\Projects\MyAwesomeCart\mac>python manage.py shell
Python 3.7.1 (v3.7.1:260ec2c36a, Oct 20 2018, 14:57:15) [MSC v.1915 64 bit (AMD64)] on
win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from shop.models import Product
>>> Product.objects.all
<bound method BaseManager.all of <django.db.models.manager.Manager object at 0x000001E7
316E4470>>
>>> Product.objects.all()
<QuerySet [<Product: watch>, <Product: ghadi>]>
>>> myprod = Product(product_name="mouse",category="computer",subcategory="devices",pri
ce=12,desc="chuha hai ye", pub_date=timezone.now())
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'timezone' is not defined
>>> from django.utils import timezone
>>> myprod = Product(product_name="mouse",category="computer",subcategory="devices",pri
ce=12,desc="chuha hai ye", pub_date=timezone.now())
>>> myprod.save()
>>> myprod.product_id
<class 'django.db.models.fields.AutoField'>
>>> myprod.product_name
'mouse'
>>> Product.objects.all()
<QuerySet [<Product: watch>, <Product: ghadi>, <Product: mouse>]>
>>> Product.objects.get(product_name="mouse")
<Product: mouse>
>>> a=Product.objects.get(product_name="mouse")
>>> a.category
'computer'
# to update values in a database
>>> a.price=200
>>> a.save()
>>> a.price
200


Template 	inheritence-
If you want some code of html to occur in all your pages of app or website then use this concept like inheritance of code of nav bar, footer in all pages of shop
taaki baad mein agar bootstrap ka version 4.2 se 4.3 ho gaya to hume ek hi jagah karna pade 


For showing data stored in dataset in your frontend 
products=Product.objects.all()
pass all products in a variable(let product) in dictionary(params) to html file
add those objects like other variables {{product(variable name).index.attribute}}
you would have to use templating language(logic like python) in your HTML for playing around with coding(like to use for loop, if else to control the front end)
syntax - { %       %}
example - {% for i in products(variable passed to html) %}
in django, forloop.counter starts from 1 not 0
we can not access dataset values directly in html file using{{ }}, first we have to pass the dataset values as variable in a dict in a function which calls that html file and then use the variable in dict in that html file only. If want to use it other then store in local storage and access from it.

now if anyone press add to cart then what happens and how to handle this situation?
1. you make a form for which each add to cart button(for all items displayed) and on clicking the button your new html of cart is displayed(redirected to new url or on same)
2. no form, you click on item and then the item get added to cart but remain on that page and can contine shopping, for this we use javascript to save details in frontend using javascript feature storage called session storage(saved on server) in which details remian till the the session is not reloaded, so further use local storage(saved on client computer) feature and data in local storage stays in computer's memory but to access that data we have to write code to retrieve it in all webpages where required or write in basic.html and using inheritance template get it in all.
in this feature data is stored on client computer itself and updated accordingly as client makes changes.
3. this feature can also be done using cookies so that the virtual cart update can be saved by browser(when the user has not logged in)
when you make account then only your cart in website database gets updated so that the client can access cart from any device if loggined from that device.
 Applications - 1. you have not made any account on amazon then also you can add item on your cart and even on reloading page it stores the details.
when you make account then only your cart in website database gets updated
2. when you login on any website then login details get saved on your browser save passwords for that page not in your local storage nor in cookies. cookies and local storage is different. cookies store information details for your current loginned accounts and are sent to server with http request that you make, it acts as a token which is granted by website server after validating your credentials so you can acces your account(so if you do not logout and close browser and then again open browser then you are logged in and once you cler cookies then automatically log off). when you do not login then also some websites wants to send cookies which means they assign you a id and that info is stored on our computer but also sent to the server so that they can serve you better by showing you the stuff according to your choices made or links you opened and all that info gets added to cookies. so if your session gets over may or may not be the cookies get deleted(depends on how website is made)
on the other hand local storage is a feature of html5 that stores info on your computer also but do not send this detail to server(also its space is higher than cookies) and are read through js only on client side.
so for security purpose cookies are more dangerous. 
then some browsers like chrome have added feature of saving passwords for your login on several websites that is not cleared by clearing cookies or localstorage but you have to do it manually in settings.



how to pass the data to new url or to new endpoint and use it there according to the choice made by client -
the option that the client chose must already have a url followed by product or file id or something from which that file can be referenced and the function which will be called adter that link is invoked will parse the refernce from url and then we can use it.


note - when performing any mathematical or logical operation on variable passed in dict in views.py to html  then in html use only templating language as js will consider it to be text anly and can be used to display it only on frontend

how to save data send by client through form in database?
parse the data through request.POST.get and just as we enter data in python manage.py shell using python in the same way enter the data in views.py defined function then save it and return the contact.html again(blank) but here nothing is shown to customer that the request is successful or not before the contact.html is sent back(where we request) so send alert message using js, for this you have to make an event like make a variable thank and make it true in views.py after successful contact.save then pass this as variable to html and then using if condn in html(this if condition only using django template language not js as this condition will be checked after the form is submitted and then variable is loaded in html if in return request the url of same page, if use js then we can't perform some logic like using for loop or comparing it can't be done as it considers that variable as text only )



why to use ajax when we have js?
ajax is asynchronous js which means it updates the frontend without reloading the page after sending the data to server and getting some response
while js updates the frontend without reloading without sending the data to server
ajax tab use karte hai jab aapko page bina reload kiye submit karna hota hai to fir us form ko koi action nahi dete or id dete hai taaki use call kar sake
use preventDefault() method to prevent default behaviour of form to relad the page.
also replace uncompressed jquery with slim jquery
this feature is used in tracker

when to jquery 'on' feature?
suppose apna ek span tag ke andar ek button banaya or is span tag ke andar dynamically ek dusra button banaya(phele wale ko replace karne ke liye) using doument.elementById(span ki id).innerHTML then us dynamically genrated button ko functioning karne ke liye aap directly uski class se call karke or jquery .click(function) feature use karke nahi kar skte. For dynamically genrated html and to make it functioning you have to use this jquery 'on' feature, ye show karne ke liye ki ab ye button on hai ab uski class ko use karke functioning kar skte hai kyuki phele to ye available hi nahi the to pata kaise chale ga html ko ki ye on hai ki nahi.


messages feature of django- 
first - messages.success(request, "message")
second - return redirect('url') url on which you want message on which html includes templating language to handle the message

fileds of default users(client) in django that get stored in database
Choices are: date_joined, email, first_name, groups, id, is_active, is_staff, is_superuser, last_login, last_name, logentry, password, user_permissions, username


django.contrib.auth feature - 
user = authenticate(username=loginusername, password=loginpass)
# built in feature to see that the person has account or not in database to login
also has a pre-defined function to logout

how to check if the user is loginned or not and keep that user loginned till he manually do the logout?
1. using local storage, or cookies and at each page check using js if he has loginned or not to perform some function(possible only if loginned)
2. using django user.is_authenticate feature(if want to logout then either logout manually or delete cookies)



to modify admin panel of website - 


<!-- card CSS --> 
    <link rel="stylesheet" type="text/css" href="{% static 'core/css/styles.css' %}" />